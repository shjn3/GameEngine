/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/GameEngine/add/CAdd.ts":
/*!************************************!*\
  !*** ./src/GameEngine/add/CAdd.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CAnimation_1 = __importDefault(__webpack_require__(/*! ../animation/CAnimation */ \"./src/GameEngine/animation/CAnimation.ts\"));\r\nconst CLoad_1 = __importDefault(__webpack_require__(/*! ../load/CLoad */ \"./src/GameEngine/load/CLoad.ts\"));\r\nconst CText_1 = __importDefault(__webpack_require__(/*! ../text/CText */ \"./src/GameEngine/text/CText.ts\"));\r\nconst CImage_1 = __importDefault(__webpack_require__(/*! ../image/CImage */ \"./src/GameEngine/image/CImage.ts\"));\r\nconst CImageSprite_1 = __importDefault(__webpack_require__(/*! ../image/CImageSprite */ \"./src/GameEngine/image/CImageSprite.ts\"));\r\nclass CAdd {\r\n    constructor() { }\r\n    image(x, y, width, height, name) {\r\n        let _imageAddTemp = CLoad_1.default.arrImage.filter((_e) => _e.getName() === name);\r\n        if (_imageAddTemp[0]) {\r\n            let temp = new CImage_1.default();\r\n            let image = _imageAddTemp[0].getImage();\r\n            temp.setName(name);\r\n            temp.setPosition(x, y);\r\n            temp.setWidth(width);\r\n            temp.setHeight(height);\r\n            temp.setIsDraw(true);\r\n            temp.image = image;\r\n            temp.key = Math.floor(Math.random() * Date.now());\r\n            CAdd.arrDrawImage.push(temp);\r\n            return temp;\r\n        }\r\n        return new CImage_1.default();\r\n    }\r\n    imageSprite(x, y, width, height, name, keyFrame) {\r\n        let temp = new CImageSprite_1.default();\r\n        let _imageSpriteAddTemp = CLoad_1.default.arrImageSprite.filter((_e) => _e.getName() === name);\r\n        if (_imageSpriteAddTemp[0]) {\r\n            if (_imageSpriteAddTemp[0].frameInSprite.length > 0) {\r\n                let _imageSpriteConfigTemp = _imageSpriteAddTemp[0].frameInSprite.filter((_e) => _e.key === keyFrame);\r\n                if (_imageSpriteConfigTemp[0]) {\r\n                    temp.setFrameInSprite(_imageSpriteConfigTemp);\r\n                    temp.setHeight(height);\r\n                    temp.setWidth(width);\r\n                    temp.setPosition(x, y);\r\n                    temp.image = _imageSpriteAddTemp[0].image;\r\n                    temp.isDraw = true;\r\n                    temp.key = Math.floor(Math.random() * Date.now());\r\n                    CAdd.arrDrawImageSprite.push(temp);\r\n                }\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n    spriteSheet(x, y, width, height, name) {\r\n        let _animation = new CAnimation_1.default();\r\n        let _idSpriteSheetAddTemp = -1;\r\n        CLoad_1.default.arrImageSprite.forEach((_e, index) => {\r\n            if (_e.getName() === name) {\r\n                _idSpriteSheetAddTemp = index;\r\n                return;\r\n            }\r\n        });\r\n        // let _spriteSheetAddTemp = CLoad.arrImageSprite.filter(\r\n        //   (_e) => _e.getName() === name\r\n        // );\r\n        if (_idSpriteSheetAddTemp !== -1) {\r\n            let _image = CLoad_1.default.arrImageSprite[_idSpriteSheetAddTemp].image;\r\n            let _frameInSprite = CLoad_1.default.arrImageSprite[_idSpriteSheetAddTemp].frameInSprite;\r\n            let temp = {\r\n                image: _image,\r\n                frameInSprite: _frameInSprite,\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                frames: [],\r\n            };\r\n            _animation.drawSingleAnimation = temp;\r\n        }\r\n        return _animation;\r\n    }\r\n    text(name, x, y, text, font = \"Arial\", size = 13) {\r\n        let _textTemp = new CText_1.default();\r\n        _textTemp.setName(name);\r\n        _textTemp.setPosition(x, y);\r\n        _textTemp.setFont(font);\r\n        _textTemp.setSize(size);\r\n        _textTemp.setText(text);\r\n        _textTemp.key = Math.floor(Math.random() * Date.now());\r\n        CAdd.arrText.push(_textTemp);\r\n        return _textTemp;\r\n    }\r\n}\r\nexports[\"default\"] = CAdd;\r\nCAdd.arrText = [];\r\nCAdd.arrDrawImage = [];\r\nCAdd.arrDrawImageSprite = [];\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/add/CAdd.ts?");

/***/ }),

/***/ "./src/GameEngine/animation/CAnimation.ts":
/*!************************************************!*\
  !*** ./src/GameEngine/animation/CAnimation.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CConfigAnimation_1 = __importDefault(__webpack_require__(/*! ./CConfigAnimation */ \"./src/GameEngine/animation/CConfigAnimation.ts\"));\r\nclass CAnimation {\r\n    constructor() {\r\n        this.nameAnimation = \"\";\r\n        this.key = Math.floor(Math.random() * Date.now());\r\n    }\r\n    create(configAnimation) {\r\n        let configTemp = JSON.parse(JSON.stringify(configAnimation));\r\n        CAnimation.arrConfigAnimation.push(configTemp);\r\n    }\r\n    play(nameAnimation) {\r\n        if (this.nameAnimation !== nameAnimation) {\r\n            if (CAnimation.arrConfigAnimation.length > 0) {\r\n                CAnimation.arrDrawAnimation = CAnimation.arrDrawAnimation.filter((_e) => _e.key !== this.key);\r\n                let configAnimationTemp = CAnimation.arrConfigAnimation.filter((_e) => _e.key === nameAnimation);\r\n                if (configAnimationTemp[0]) {\r\n                    let { frames, frameRate, repeat } = configAnimationTemp[0];\r\n                    if (this.drawSingleAnimation) {\r\n                        let arrFrameFromSprite = [];\r\n                        let framesLength = frames.length;\r\n                        this.drawSingleAnimation.frameInSprite.forEach((_e) => {\r\n                            for (let i = 0; i < framesLength; i++) {\r\n                                if (_e.key === frames[i]) {\r\n                                    arrFrameFromSprite.push(_e);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        });\r\n                        this.drawSingleAnimation.frames = arrFrameFromSprite;\r\n                        let _configAnimationTemp = new CConfigAnimation_1.default();\r\n                        _configAnimationTemp.frameRate = frameRate;\r\n                        _configAnimationTemp.repeat = repeat;\r\n                        _configAnimationTemp.drawImage = this.drawSingleAnimation;\r\n                        _configAnimationTemp.name = nameAnimation;\r\n                        _configAnimationTemp.key = this.key;\r\n                        CAnimation.arrDrawAnimation.push(_configAnimationTemp);\r\n                    }\r\n                }\r\n            }\r\n            this.nameAnimation = nameAnimation;\r\n        }\r\n    }\r\n    destroy() {\r\n        CAnimation.arrDrawAnimation = CAnimation.arrDrawAnimation.filter((_e) => _e.key !== this.key);\r\n    }\r\n}\r\nexports[\"default\"] = CAnimation;\r\nCAnimation.arrDrawAnimation = [];\r\nCAnimation.arrConfigAnimation = [];\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/animation/CAnimation.ts?");

/***/ }),

/***/ "./src/GameEngine/animation/CConfigAnimation.ts":
/*!******************************************************!*\
  !*** ./src/GameEngine/animation/CConfigAnimation.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass CConfigAnimation {\r\n    constructor() {\r\n        this.repeat = -1;\r\n        this.frameRate = 60;\r\n        this.mainFrame = 0;\r\n        this.timer = 0;\r\n        this.name = \"\";\r\n        this.key = 0;\r\n    }\r\n}\r\nexports[\"default\"] = CConfigAnimation;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/animation/CConfigAnimation.ts?");

/***/ }),

/***/ "./src/GameEngine/base/CObject.ts":
/*!****************************************!*\
  !*** ./src/GameEngine/base/CObject.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass CObject {\r\n    constructor() {\r\n        this.position = { x: 0, y: 0 };\r\n        this.width = 0;\r\n        this.height = 0;\r\n    }\r\n    setPosition(x, y) {\r\n        this.position = { x, y };\r\n    }\r\n    setWidth(width) {\r\n        this.width = width;\r\n    }\r\n    setHeight(height) {\r\n        this.height = height;\r\n    }\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n}\r\nexports[\"default\"] = CObject;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/base/CObject.ts?");

/***/ }),

/***/ "./src/GameEngine/game/CGame.ts":
/*!**************************************!*\
  !*** ./src/GameEngine/game/CGame.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass CGame {\r\n    constructor(config = {}) {\r\n        const { width, height, parent, scenes = [] } = config;\r\n        CGame.canvas = document.querySelector(`#${parent} canvas`);\r\n        CGame.canvas.width = width;\r\n        CGame.canvas.height = height;\r\n        CGame.ctx = CGame.canvas.getContext(\"2d\");\r\n        // CGame.arrScenes = scenes;\r\n        if (scenes.length > 0) {\r\n            scenes.forEach((_e) => CGame.arrScenes.push(new _e()));\r\n        }\r\n        this.init();\r\n    }\r\n    init() {\r\n        CGame.arrScenes[0].setIsActive(true);\r\n        CGame.arrScenes[0].active();\r\n    }\r\n}\r\nexports[\"default\"] = CGame;\r\nCGame.arrScenes = [];\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/game/CGame.ts?");

/***/ }),

/***/ "./src/GameEngine/image/CImage.ts":
/*!****************************************!*\
  !*** ./src/GameEngine/image/CImage.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CAdd_1 = __importDefault(__webpack_require__(/*! ../add/CAdd */ \"./src/GameEngine/add/CAdd.ts\"));\r\nconst CObject_1 = __importDefault(__webpack_require__(/*! ../base/CObject */ \"./src/GameEngine/base/CObject.ts\"));\r\nclass CImage extends CObject_1.default {\r\n    constructor() {\r\n        super();\r\n        this.name = \"\";\r\n        this.image = new Image();\r\n        this.key = 0;\r\n        this.isDraw = false;\r\n    }\r\n    setKey(key) {\r\n        this.key = key;\r\n    }\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n    setIsDraw(isDraw) {\r\n        this.isDraw = isDraw;\r\n    }\r\n    getIsDraw() {\r\n        return this.isDraw;\r\n    }\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n    setImage(url) {\r\n        this.image.src = url;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getImage() {\r\n        return this.image;\r\n    }\r\n    destroy() {\r\n        CAdd_1.default.arrDrawImage = CAdd_1.default.arrDrawImage.filter((_e) => _e.key !== this.key);\r\n    }\r\n}\r\nexports[\"default\"] = CImage;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/image/CImage.ts?");

/***/ }),

/***/ "./src/GameEngine/image/CImageSprite.ts":
/*!**********************************************!*\
  !*** ./src/GameEngine/image/CImageSprite.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CAdd_1 = __importDefault(__webpack_require__(/*! ../add/CAdd */ \"./src/GameEngine/add/CAdd.ts\"));\r\nconst CObject_1 = __importDefault(__webpack_require__(/*! ../base/CObject */ \"./src/GameEngine/base/CObject.ts\"));\r\nclass CImageSprite extends CObject_1.default {\r\n    constructor() {\r\n        super();\r\n        this.frameInSprite = [];\r\n        this.name = \"\";\r\n        this.image = new Image();\r\n        this.key = 0;\r\n        this.isDraw = false;\r\n    }\r\n    setKey(key) {\r\n        this.key = key;\r\n    }\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n    setIsDraw(isDraw) {\r\n        this.isDraw = isDraw;\r\n    }\r\n    getIsDraw() {\r\n        return this.isDraw;\r\n    }\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n    setImage(url) {\r\n        this.image.src = url;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getImage() {\r\n        return this.image;\r\n    }\r\n    getFrameInSprite() {\r\n        return JSON.parse(JSON.stringify(this.frameInSprite));\r\n    }\r\n    setFrameInSprite(frameInSprite) {\r\n        this.frameInSprite = JSON.parse(JSON.stringify(frameInSprite));\r\n    }\r\n    destroy() {\r\n        CAdd_1.default.arrDrawImageSprite = CAdd_1.default.arrDrawImageSprite.filter((_e) => _e.key !== this.key);\r\n    }\r\n}\r\nexports[\"default\"] = CImageSprite;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/image/CImageSprite.ts?");

/***/ }),

/***/ "./src/GameEngine/input/CInput.ts":
/*!****************************************!*\
  !*** ./src/GameEngine/input/CInput.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CGame_1 = __importDefault(__webpack_require__(/*! ../game/CGame */ \"./src/GameEngine/game/CGame.ts\"));\r\nclass CInput {\r\n    constructor() { }\r\n    keydown(key, callback) {\r\n        window.addEventListener(\"keydown\", (e) => {\r\n            if (e.key === key)\r\n                callback();\r\n        });\r\n    }\r\n    keyup(key, callback) {\r\n        window.addEventListener(\"keyup\", (e) => {\r\n            if (e.key === key)\r\n                callback();\r\n        });\r\n    }\r\n    onClick(callback) {\r\n        CGame_1.default.canvas.addEventListener(\"click\", callback);\r\n    }\r\n    removeOnClick(callback) {\r\n        CGame_1.default.canvas.removeEventListener(\"click\", callback, false);\r\n    }\r\n}\r\nexports[\"default\"] = CInput;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/input/CInput.ts?");

/***/ }),

/***/ "./src/GameEngine/load/CLoad.ts":
/*!**************************************!*\
  !*** ./src/GameEngine/load/CLoad.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CImage_1 = __importDefault(__webpack_require__(/*! ../image/CImage */ \"./src/GameEngine/image/CImage.ts\"));\r\nconst CImageSprite_1 = __importDefault(__webpack_require__(/*! ../image/CImageSprite */ \"./src/GameEngine/image/CImageSprite.ts\"));\r\nclass CLoad {\r\n    constructor() { }\r\n    image(name, url) {\r\n        let _imageTemp = new CImage_1.default();\r\n        _imageTemp.setName(name);\r\n        _imageTemp.setImage(url);\r\n        _imageTemp.setKey(Math.floor(Math.random() * Date.now()));\r\n        CLoad.arrImage.push(_imageTemp);\r\n    }\r\n    imageSprite(name, url, frameInSprite) {\r\n        let _imageSpriteTemp = new CImageSprite_1.default();\r\n        _imageSpriteTemp.setName(name);\r\n        _imageSpriteTemp.setImage(url);\r\n        _imageSpriteTemp.setFrameInSprite(frameInSprite);\r\n        _imageSpriteTemp.setKey(Math.floor(Math.random() * Date.now()));\r\n        CLoad.arrImageSprite.push(_imageSpriteTemp);\r\n    }\r\n}\r\nexports[\"default\"] = CLoad;\r\nCLoad.arrImage = [];\r\nCLoad.arrImageSprite = [];\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/load/CLoad.ts?");

/***/ }),

/***/ "./src/GameEngine/scenes/CScenes.ts":
/*!******************************************!*\
  !*** ./src/GameEngine/scenes/CScenes.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CLoad_1 = __importDefault(__webpack_require__(/*! ../load/CLoad */ \"./src/GameEngine/load/CLoad.ts\"));\r\nconst CGame_1 = __importDefault(__webpack_require__(/*! ../game/CGame */ \"./src/GameEngine/game/CGame.ts\"));\r\nconst CAdd_1 = __importDefault(__webpack_require__(/*! ../add/CAdd */ \"./src/GameEngine/add/CAdd.ts\"));\r\nconst CAnimation_1 = __importDefault(__webpack_require__(/*! ../animation/CAnimation */ \"./src/GameEngine/animation/CAnimation.ts\"));\r\nconst CInput_1 = __importDefault(__webpack_require__(/*! ../input/CInput */ \"./src/GameEngine/input/CInput.ts\"));\r\nclass CScenes {\r\n    constructor(nameScenes = \"\") {\r\n        this.load = new CLoad_1.default();\r\n        this.add = new CAdd_1.default();\r\n        this.animation = new CAnimation_1.default();\r\n        this.input = new CInput_1.default();\r\n        this.idRequestAnimation = 0;\r\n        this.isActive = false;\r\n        this.nameScenes = nameScenes;\r\n    }\r\n    setIsActive(isActive) {\r\n        this.isActive = isActive;\r\n    }\r\n    active() {\r\n        this.preload();\r\n        this.create();\r\n        this.loop();\r\n    }\r\n    preload() { }\r\n    create() { }\r\n    draw() {\r\n        if (CAdd_1.default.arrDrawImage.length > 0) {\r\n            CAdd_1.default.arrDrawImage.forEach((_e) => {\r\n                if (_e.isDraw) {\r\n                    let _image = _e.getImage(), { x, y } = _e.getPosition(), width = _e.getWidth(), height = _e.getHeight();\r\n                    CGame_1.default.ctx.beginPath();\r\n                    CGame_1.default.ctx.drawImage(_image, x, y, width, height);\r\n                }\r\n            });\r\n        }\r\n        if (CAdd_1.default.arrDrawImageSprite.length > 0) {\r\n            CAdd_1.default.arrDrawImageSprite.forEach((_e) => {\r\n                if (_e.isDraw) {\r\n                    CGame_1.default.ctx.beginPath();\r\n                    CGame_1.default.ctx.drawImage(_e.image, _e.frameInSprite[0].sPosition.x, _e.frameInSprite[0].sPosition.y, _e.frameInSprite[0].sWidth, _e.frameInSprite[0].sHeight, _e.position.x, _e.position.y, _e.width, _e.height);\r\n                }\r\n            });\r\n        }\r\n        if (CAnimation_1.default.arrDrawAnimation.length > 0) {\r\n            CAnimation_1.default.arrDrawAnimation.forEach((_e) => {\r\n                _e.timer++;\r\n                if (_e.timer > 1000 / _e.frameRate) {\r\n                    _e.timer = 0;\r\n                    if (_e.drawImage.frames.length > 1) {\r\n                        if (_e.mainFrame + 1 === _e.drawImage.frames.length) {\r\n                            _e.mainFrame = 0;\r\n                        }\r\n                        else {\r\n                            _e.mainFrame++;\r\n                        }\r\n                    }\r\n                }\r\n                CGame_1.default.ctx.drawImage(_e.drawImage.image, _e.drawImage.frames[_e.mainFrame].sPosition.x, _e.drawImage.frames[_e.mainFrame].sPosition.y, _e.drawImage.frames[_e.mainFrame].sWidth, _e.drawImage.frames[_e.mainFrame].sHeight, _e.drawImage.x, _e.drawImage.y, _e.drawImage.width, _e.drawImage.height);\r\n            });\r\n        }\r\n        if (CAdd_1.default.arrText.length > 0) {\r\n            CAdd_1.default.arrText.forEach((_e) => {\r\n                let text = _e.getText();\r\n                let size = _e.getSize();\r\n                let font = _e.getFont();\r\n                let { x, y } = _e.getPosition();\r\n                CGame_1.default.ctx.beginPath();\r\n                CGame_1.default.ctx.font = `${size}px ${font}`;\r\n                CGame_1.default.ctx.fillText(`${text}`, x, y);\r\n            });\r\n        }\r\n    }\r\n    update() { }\r\n    loop() {\r\n        this.idRequestAnimation = window.requestAnimationFrame(() => this.loop());\r\n        CGame_1.default.ctx.clearRect(0, 0, CGame_1.default.canvas.width, CGame_1.default.canvas.height);\r\n        this.draw();\r\n        this.update();\r\n    }\r\n    changeScenes(name) {\r\n        CAnimation_1.default.arrConfigAnimation = [];\r\n        CAdd_1.default.arrDrawImageSprite = [];\r\n        CAdd_1.default.arrText = [];\r\n        CAdd_1.default.arrDrawImage = [];\r\n        CAnimation_1.default.arrDrawAnimation = [];\r\n        CGame_1.default.ctx.clearRect(0, 0, CGame_1.default.canvas.width, CGame_1.default.canvas.height);\r\n        this.draw();\r\n        this.isActive = false;\r\n        window.cancelAnimationFrame(this.idRequestAnimation);\r\n        let lengthArrScenes = CGame_1.default.arrScenes.length;\r\n        for (let i = 0; i < lengthArrScenes; i++) {\r\n            if (name === CGame_1.default.arrScenes[i].nameScenes) {\r\n                CGame_1.default.arrScenes[i].setIsActive(true);\r\n                CGame_1.default.arrScenes[i].active();\r\n            }\r\n        }\r\n    }\r\n}\r\nexports[\"default\"] = CScenes;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/scenes/CScenes.ts?");

/***/ }),

/***/ "./src/GameEngine/text/CText.ts":
/*!**************************************!*\
  !*** ./src/GameEngine/text/CText.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CAdd_1 = __importDefault(__webpack_require__(/*! ../add/CAdd */ \"./src/GameEngine/add/CAdd.ts\"));\r\nconst CObject_1 = __importDefault(__webpack_require__(/*! ../base/CObject */ \"./src/GameEngine/base/CObject.ts\"));\r\nclass CText extends CObject_1.default {\r\n    constructor() {\r\n        super();\r\n        this.text = \"\";\r\n        this.font = \"Arial\";\r\n        this.size = 13;\r\n        this.name = \"\";\r\n        this.key = 0;\r\n        this.isVisible = false;\r\n    }\r\n    setIsVisible(isVisible) {\r\n        this.isVisible = isVisible;\r\n    }\r\n    getIsVisible() {\r\n        return this.isVisible;\r\n    }\r\n    destroy() {\r\n        CAdd_1.default.arrText = CAdd_1.default.arrText.filter((_e) => _e.key === this.key);\r\n    }\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    setText(text) {\r\n        this.text = text;\r\n    }\r\n    getText() {\r\n        return this.text;\r\n    }\r\n    setFont(font) {\r\n        this.font = font;\r\n    }\r\n    getFont() {\r\n        return this.font;\r\n    }\r\n    setSize(size) {\r\n        this.size = size;\r\n    }\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\nexports[\"default\"] = CText;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/GameEngine/text/CText.ts?");

/***/ }),

/***/ "./src/TrexGame/ScenesPlay.ts":
/*!************************************!*\
  !*** ./src/TrexGame/ScenesPlay.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CScenes_1 = __importDefault(__webpack_require__(/*! ../GameEngine/scenes/CScenes */ \"./src/GameEngine/scenes/CScenes.ts\"));\r\nconst CAnimation_1 = __importDefault(__webpack_require__(/*! ../GameEngine/animation/CAnimation */ \"./src/GameEngine/animation/CAnimation.ts\"));\r\nconst CImage_1 = __importDefault(__webpack_require__(/*! ../GameEngine/image/CImage */ \"./src/GameEngine/image/CImage.ts\"));\r\nconst CImageSprite_1 = __importDefault(__webpack_require__(/*! ../GameEngine/image/CImageSprite */ \"./src/GameEngine/image/CImageSprite.ts\"));\r\nconst CText_1 = __importDefault(__webpack_require__(/*! ../GameEngine/text/CText */ \"./src/GameEngine/text/CText.ts\"));\r\nclass ScenesPlay extends CScenes_1.default {\r\n    constructor() {\r\n        super(\"play\");\r\n        this.maxCloud = 6;\r\n        this.btnStart = new CImage_1.default();\r\n        this.btnRestart = new CImageSprite_1.default();\r\n        this.txtGameOver = new CImageSprite_1.default();\r\n        this.arrCloud = [];\r\n        this.player = new CAnimation_1.default();\r\n        this.obstaclesCactus = [];\r\n        this.obstaclesPTerodactyl = [];\r\n        this.jumpVelocity = -13;\r\n        this.gameOver = false;\r\n        this.score = 0;\r\n        this.arrGround = [];\r\n        this.textScore = new CText_1.default();\r\n        this.textHightScore = new CText_1.default();\r\n        this.heightScore = 0;\r\n        this.timer = 0;\r\n        this.velocity = -3;\r\n    }\r\n    preload() { }\r\n    create() {\r\n        this.createGround();\r\n        //draw cloud\r\n        this.createCloud();\r\n        //draw Animation\r\n        this.createPlayer();\r\n        //draw Obstacles\r\n        this.createObstacles();\r\n        this.createScore();\r\n        //create event input\r\n        this.createEvent();\r\n        this.createGameOver();\r\n    }\r\n    createGameOver() {\r\n        this.btnRestart = this.add.imageSprite(400, 150, 70, 60, \"mainSprite\", \"btnRestart\");\r\n        this.btnRestart.setIsDraw(false);\r\n        this.txtGameOver = this.add.imageSprite(300, 110, 270, 20, \"mainSprite\", \"txtGameOver\");\r\n        this.txtGameOver.setIsDraw(false);\r\n    }\r\n    createScore() {\r\n        this.textScore = this.add.text(\"TextForScore\", 600, 30, \"Score: 0\", \"Arial\", 20);\r\n        this.textHightScore = this.add.text(\"TextForScore\", 600, 60, `Hight Score: ${this.heightScore}`, \"Arial\", 20);\r\n    }\r\n    createGround() {\r\n        this.arrGround.push(this.add.imageSprite(0, 320, 1600, 30, \"mainSprite\", \"ground\"));\r\n        this.arrGround.push(this.add.imageSprite(1600, 320, 1600, 30, \"mainSprite\", \"ground\"));\r\n    }\r\n    createCloud() {\r\n        this.arrCloud.push(this.add.imageSprite(800, 0, 100, 50, \"mainSprite\", \"cloud\"));\r\n    }\r\n    createPlayer() {\r\n        this.player = (this.add.spriteSheet(15, 290, 60, 70, \"mainSprite\"));\r\n        let configRunPlayer = {\r\n            key: \"RunPlayer\",\r\n            frames: [\"run1\", \"run2\"],\r\n            frameRate: 60,\r\n            repeat: -1,\r\n        };\r\n        let configDuckPlayer = {\r\n            key: \"DuckPlayer\",\r\n            frames: [\"duck1\", \"duck2\"],\r\n            frameRate: 60,\r\n            repeat: -1,\r\n        };\r\n        let configJumpPlayer = {\r\n            key: \"JumpPlayer\",\r\n            frames: [\"jump\"],\r\n            frameRate: 60,\r\n            repeat: -1,\r\n        };\r\n        let configDiePlayer = {\r\n            key: \"DiePlayer\",\r\n            frames: [\"die\"],\r\n            frameRate: 60,\r\n            repeat: -1,\r\n        };\r\n        this.animation.create(configRunPlayer);\r\n        this.animation.create(configDuckPlayer);\r\n        this.animation.create(configJumpPlayer);\r\n        this.animation.create(configDiePlayer);\r\n        this.player.drawSingleAnimation.y = 290;\r\n        this.player.play(\"RunPlayer\");\r\n    }\r\n    createEvent() {\r\n        //add event\r\n        this.input.keydown(\" \", () => {\r\n            if (this.player.nameAnimation === \"RunPlayer\")\r\n                this.player.play(\"JumpPlayer\");\r\n        });\r\n        this.input.keydown(\"ArrowUp\", () => {\r\n            if (this.player.nameAnimation === \"RunPlayer\")\r\n                this.player.play(\"JumpPlayer\");\r\n        });\r\n        this.input.keydown(\"ArrowDown\", () => {\r\n            if (this.player.nameAnimation === \"RunPlayer\") {\r\n                this.player.drawSingleAnimation.y = 295;\r\n                this.player.drawSingleAnimation.width = 70;\r\n                this.player.drawSingleAnimation.height = 55;\r\n                this.player.play(\"DuckPlayer\");\r\n            }\r\n        });\r\n        this.input.keyup(\"ArrowDown\", () => {\r\n            if (this.player.nameAnimation === \"DuckPlayer\") {\r\n                this.player.drawSingleAnimation.y = 290;\r\n                this.player.drawSingleAnimation.width = 60;\r\n                this.player.drawSingleAnimation.height = 70;\r\n                this.player.play(\"RunPlayer\");\r\n            }\r\n        });\r\n        this.input.onClick((e) => {\r\n            if (this.gameOver) {\r\n                if (e.offsetX > 400 &&\r\n                    e.offsetX < 470 &&\r\n                    e.offsetY > 150 &&\r\n                    e.offsetY < 210) {\r\n                    this.gameOver = false;\r\n                    this.arrCloud = [];\r\n                    this.arrGround = [];\r\n                    this.obstaclesPTerodactyl = [];\r\n                    this.obstaclesCactus = [];\r\n                    this.score = 0;\r\n                    this.timer = 0;\r\n                    this.changeScenes(\"start\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n    createObstacles() {\r\n        // this.obstaclesCactus.push(\r\n        //   this.add.imageSprite(800, 295, 30, 45, \"mainSprite\", \"cactusSmall\")\r\n        // );\r\n        let configObstaclesPterodactyl = {\r\n            key: \"PTerodactyl\",\r\n            frames: [\"PTerodactyl1\", \"PTerodactyl2\"],\r\n            frameRate: 30,\r\n            repeat: -1,\r\n        };\r\n        this.animation.create(configObstaclesPterodactyl);\r\n        this.obstaclesPTerodactyl.push(this.add.spriteSheet(1000, 265, 50, 30, \"mainSprite\"));\r\n        this.obstaclesPTerodactyl[0].play(\"PTerodactyl\");\r\n    }\r\n    //======================================== update\r\n    update() {\r\n        if (!this.gameOver) {\r\n            this.updateGround();\r\n            this.updateScore();\r\n            this.updateObstacles();\r\n            this.updateCloud();\r\n            this.updatePlayerJump();\r\n            this.CollisionDetection();\r\n        }\r\n        else {\r\n            this.updateHightScore();\r\n            this.btnRestart.setIsDraw(true);\r\n            this.txtGameOver.setIsDraw(true);\r\n        }\r\n    }\r\n    updateGround() {\r\n        if (this.arrGround.length > 0) {\r\n            this.arrGround[0].position.x += this.velocity;\r\n            this.arrGround[1].position.x += this.velocity;\r\n            if (this.arrGround[0].position.x < -1600) {\r\n                this.arrGround[0].destroy();\r\n                this.arrGround.splice(0, 1);\r\n                this.arrGround.push(this.add.imageSprite(1600, 320, 1600, 30, \"mainSprite\", \"ground\"));\r\n            }\r\n        }\r\n    }\r\n    updateHightScore() {\r\n        this.heightScore = Math.max(this.heightScore, this.score);\r\n        this.textHightScore.setText(`Hight Score: ${this.heightScore}`);\r\n    }\r\n    updateScore() {\r\n        this.timer++;\r\n        if (this.timer > 50) {\r\n            this.timer = 0;\r\n            this.score++;\r\n            this.textScore.setText(`Score: ${this.score}`);\r\n        }\r\n    }\r\n    updateObstacles() {\r\n        let lengthCactus = this.obstaclesCactus.length;\r\n        let lengthPterodactyl = this.obstaclesPTerodactyl.length;\r\n        if (lengthCactus > 0) {\r\n            this.obstaclesCactus.forEach((_e) => (_e.position.x += this.velocity));\r\n        }\r\n        if (lengthPterodactyl > 0) {\r\n            this.obstaclesPTerodactyl.forEach((_e) => (_e.drawSingleAnimation.x += this.velocity - 1));\r\n        }\r\n        let maxWidth = 0;\r\n        if (lengthCactus > 0 && lengthPterodactyl > 0) {\r\n            maxWidth = Math.max(this.obstaclesCactus[lengthCactus - 1].position.x +\r\n                this.obstaclesCactus[lengthCactus - 1].width, this.obstaclesPTerodactyl[lengthPterodactyl - 1].drawSingleAnimation.x +\r\n                this.obstaclesPTerodactyl[lengthPterodactyl - 1].drawSingleAnimation\r\n                    .width);\r\n        }\r\n        else if (lengthCactus > 0 && lengthPterodactyl === 0) {\r\n            maxWidth =\r\n                this.obstaclesCactus[lengthCactus - 1].position.x +\r\n                    this.obstaclesCactus[lengthCactus - 1].width;\r\n        }\r\n        else if (lengthCactus === 0 && lengthPterodactyl > 0) {\r\n            maxWidth =\r\n                this.obstaclesPTerodactyl[lengthPterodactyl - 1].drawSingleAnimation.x +\r\n                    this.obstaclesPTerodactyl[lengthPterodactyl - 1].drawSingleAnimation\r\n                        .width;\r\n        }\r\n        let randomGap = this.getRandom(300, 600);\r\n        if (maxWidth + randomGap < 800) {\r\n            let randomType = this.getRandom(1, 2); //1 cactus 2 pterodactyl\r\n            switch (randomType) {\r\n                case 1:\r\n                    let randomSize = this.getRandom(2, 3);\r\n                    if (randomSize === 1) {\r\n                        this.obstaclesCactus.push(this.add.imageSprite(800, 295, 30, 45, \"mainSprite\", \"cactusSmall\"));\r\n                    }\r\n                    else {\r\n                        this.obstaclesCactus.push(this.add.imageSprite(800, 285, 30, 60, \"mainSprite\", \"cactusLarge\"));\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    let height = [290, 265, 240];\r\n                    let randomHeight = this.getRandom(0, 2);\r\n                    this.obstaclesPTerodactyl.push(this.add.spriteSheet(800, height[randomHeight], 50, 30, \"mainSprite\"));\r\n                    this.obstaclesPTerodactyl[lengthPterodactyl].play(\"PTerodactyl\");\r\n                    break;\r\n            }\r\n        }\r\n        if (this.obstaclesCactus.length > 0) {\r\n            if (this.obstaclesCactus[0].position.x + this.obstaclesCactus[0].width <\r\n                0) {\r\n                this.obstaclesCactus[0].destroy();\r\n                this.obstaclesCactus.splice(0, 1);\r\n            }\r\n        }\r\n        if (this.obstaclesPTerodactyl.length > 0) {\r\n            if (this.obstaclesPTerodactyl[0].drawSingleAnimation.x +\r\n                this.obstaclesPTerodactyl[0].drawSingleAnimation.width <\r\n                0) {\r\n                this.obstaclesPTerodactyl[0].destroy();\r\n                this.obstaclesPTerodactyl.splice(0, 1);\r\n            }\r\n        }\r\n    }\r\n    updatePlayerJump() {\r\n        if (this.player.nameAnimation === \"JumpPlayer\") {\r\n            this.jumpVelocity += 0.3 * 1.1;\r\n            this.player.drawSingleAnimation.y += this.jumpVelocity;\r\n            if (this.player.drawSingleAnimation.y > 290) {\r\n                this.jumpVelocity = -13;\r\n                this.player.drawSingleAnimation.y = 290;\r\n                this.player.play(\"RunPlayer\");\r\n            }\r\n        }\r\n    }\r\n    CollisionDetection() {\r\n        if (this.obstaclesCactus.length > 0) {\r\n            if (this.obstaclesCactus[0].position.x + this.obstaclesCactus[0].width >\r\n                this.player.drawSingleAnimation.x &&\r\n                this.obstaclesCactus[0].position.x <\r\n                    this.player.drawSingleAnimation.x +\r\n                        this.player.drawSingleAnimation.width &&\r\n                this.obstaclesCactus[0].position.y + this.obstaclesCactus[0].height >\r\n                    this.player.drawSingleAnimation.y &&\r\n                this.obstaclesCactus[0].position.y <\r\n                    this.player.drawSingleAnimation.y +\r\n                        this.player.drawSingleAnimation.height) {\r\n                this.gameOver = true;\r\n                this.player.play(\"DiePlayer\");\r\n            }\r\n        }\r\n        if (this.obstaclesPTerodactyl.length > 0 &&\r\n            this.player.drawSingleAnimation !== undefined) {\r\n            if (this.obstaclesPTerodactyl[0].drawSingleAnimation.x +\r\n                this.obstaclesPTerodactyl[0].drawSingleAnimation.width >\r\n                this.player.drawSingleAnimation.x &&\r\n                this.obstaclesPTerodactyl[0].drawSingleAnimation.x <\r\n                    this.player.drawSingleAnimation.x +\r\n                        this.player.drawSingleAnimation.width &&\r\n                this.obstaclesPTerodactyl[0].drawSingleAnimation.y +\r\n                    this.obstaclesPTerodactyl[0].drawSingleAnimation.height >\r\n                    this.player.drawSingleAnimation.y &&\r\n                this.obstaclesPTerodactyl[0].drawSingleAnimation.y <\r\n                    this.player.drawSingleAnimation.y +\r\n                        this.player.drawSingleAnimation.height) {\r\n                this.gameOver = true;\r\n                this.player.play(\"DiePlayer\");\r\n            }\r\n        }\r\n    }\r\n    updateCloud() {\r\n        if (this.arrCloud.length > 0) {\r\n            this.arrCloud.forEach((_e) => (_e.position.x += this.velocity));\r\n            if (this.arrCloud.length < this.maxCloud &&\r\n                this.arrCloud[this.arrCloud.length - 1].position.x +\r\n                    this.arrCloud[this.arrCloud.length - 1].width <\r\n                    this.getRandom(500, 800)) {\r\n                let width = this.getRandom(40, 100);\r\n                let y = this.getRandom(0, 250);\r\n                let _cloud = this.add.imageSprite(800, y, width, width / 1.5, \"mainSprite\", \"cloud\");\r\n                this.arrCloud.push(_cloud);\r\n            }\r\n            if (this.arrCloud[0].position.x + this.arrCloud[0].width < 0) {\r\n                this.arrCloud[0].destroy();\r\n                this.arrCloud.splice(0, 1);\r\n            }\r\n        }\r\n    }\r\n    getRandom(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}\r\nexports[\"default\"] = ScenesPlay;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/TrexGame/ScenesPlay.ts?");

/***/ }),

/***/ "./src/TrexGame/ScenesStart.ts":
/*!*************************************!*\
  !*** ./src/TrexGame/ScenesStart.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CScenes_1 = __importDefault(__webpack_require__(/*! ../GameEngine/scenes/CScenes */ \"./src/GameEngine/scenes/CScenes.ts\"));\r\nclass ScenesStart extends CScenes_1.default {\r\n    constructor() {\r\n        super(\"start\");\r\n        this.onClickStart = (e) => this.handleClickStart(e);\r\n    }\r\n    preload() {\r\n        this.load.image(\"btnStart\", \"./assets/PlayButton.png\");\r\n        const frameInSprite = [\r\n            {\r\n                key: \"run1\",\r\n                sPosition: { x: 1511, y: 0 },\r\n                sWidth: 95,\r\n                sHeight: 110,\r\n            },\r\n            {\r\n                key: \"run2\",\r\n                sPosition: { x: 1599, y: 0 },\r\n                sWidth: 95,\r\n                sHeight: 110,\r\n            },\r\n            {\r\n                key: \"cloud\",\r\n                sPosition: { x: 165, y: 0 },\r\n                sWidth: 100,\r\n                sHeight: 30,\r\n            },\r\n            {\r\n                key: \"ground\",\r\n                sPosition: { x: 0, y: 100 },\r\n                sWidth: 2400,\r\n                sHeight: 30,\r\n            },\r\n            {\r\n                key: \"dinos\",\r\n                sPosition: { x: 75, y: 0 },\r\n                sWidth: 100,\r\n                sHeight: 110,\r\n            },\r\n            {\r\n                key: \"duck1\",\r\n                sPosition: { x: 1862, y: 0 },\r\n                sWidth: 120,\r\n                sHeight: 90,\r\n            },\r\n            //cw: 70, ch: 58, cY: 320 cX:15\r\n            {\r\n                key: \"duck2\",\r\n                sPosition: { x: 1982, y: 0 },\r\n                sWidth: 120,\r\n                sHeight: 90,\r\n            },\r\n            //cw: 60, ch:70, cY: 320 cx: 15\r\n            {\r\n                key: \"jump\",\r\n                sPosition: { x: 1335, y: 0 },\r\n                sWidth: 95,\r\n                sHeight: 110,\r\n            },\r\n            {\r\n                key: \"die\",\r\n                sPosition: { x: 1335, y: 0 },\r\n                sWidth: 95,\r\n                sHeight: 110,\r\n            },\r\n            {\r\n                key: \"cactusSmall\",\r\n                sPosition: { x: 616, y: 0 },\r\n                sWidth: 34,\r\n                sHeight: 70,\r\n            },\r\n            {\r\n                key: \"cactusLarge\",\r\n                sPosition: { x: 650, y: 0 },\r\n                sWidth: 50,\r\n                sHeight: 80,\r\n            },\r\n            {\r\n                key: \"PTerodactyl1\",\r\n                sPosition: { x: 260, y: 0 },\r\n                sWidth: 90,\r\n                sHeight: 70,\r\n            },\r\n            {\r\n                key: \"PTerodactyl2\",\r\n                sPosition: { x: 350, y: 0 },\r\n                sWidth: 90,\r\n                sHeight: 70,\r\n            },\r\n            {\r\n                key: \"btnRestart\",\r\n                sPosition: { x: 0, y: 0 },\r\n                sWidth: 75,\r\n                sHeight: 70,\r\n            },\r\n            {\r\n                key: \"txtGameOver\",\r\n                sPosition: { x: 955, y: 25 },\r\n                sWidth: 380,\r\n                sHeight: 30,\r\n            }\r\n        ];\r\n        this.load.imageSprite(\"mainSprite\", \"./assets/sprite.png\", frameInSprite);\r\n    }\r\n    create() {\r\n        //draw Image\r\n        this.add.image(350, 150, 100, 100, \"btnStart\");\r\n        //draw Text\r\n        this.add.text(\"TextForStart\", 320, 270, \"Click to start\", \"Arial\", 30);\r\n        //draw ground\r\n        this.add.imageSprite(0, 320, 1600, 30, \"mainSprite\", \"ground\");\r\n        //draw dinos\r\n        this.add.imageSprite(15, 282, 60, 70, \"mainSprite\", \"dinos\");\r\n        this.input.onClick(this.onClickStart);\r\n    }\r\n    handleClickStart(e) {\r\n        if (e.offsetX > 350 &&\r\n            e.offsetX < 450 &&\r\n            e.offsetY > 150 &&\r\n            e.offsetY < 250) {\r\n            this.changeScenes(\"play\");\r\n            this.input.removeOnClick(this.onClickStart);\r\n        }\r\n    }\r\n}\r\nexports[\"default\"] = ScenesStart;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/TrexGame/ScenesStart.ts?");

/***/ }),

/***/ "./src/TrexGame/config.ts":
/*!********************************!*\
  !*** ./src/TrexGame/config.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.config = void 0;\r\nconst ScenesStart_1 = __importDefault(__webpack_require__(/*! ./ScenesStart */ \"./src/TrexGame/ScenesStart.ts\"));\r\nconst ScenesPlay_1 = __importDefault(__webpack_require__(/*! ./ScenesPlay */ \"./src/TrexGame/ScenesPlay.ts\"));\r\nlet config = {\r\n    width: 800,\r\n    height: 400,\r\n    parent: \"parentCanvas\",\r\n    scenes: [ScenesStart_1.default, ScenesPlay_1.default],\r\n};\r\nexports.config = config;\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/TrexGame/config.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst CGame_1 = __importDefault(__webpack_require__(/*! ./GameEngine/game/CGame */ \"./src/GameEngine/game/CGame.ts\"));\r\nconst config_1 = __webpack_require__(/*! ./TrexGame/config */ \"./src/TrexGame/config.ts\");\r\nlet game = new CGame_1.default(config_1.config);\r\n\n\n//# sourceURL=webpack://gameengine_version2/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;